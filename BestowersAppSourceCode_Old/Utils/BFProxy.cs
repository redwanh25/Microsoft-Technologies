//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace CIS.Lib.Utils {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BFServicesSoap", Namespace="http://agmanager.info/")]
    public partial class BFServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetRegionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCropsByRegionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCropTypesByRegionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLandTypesByRegionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPlanSummaryDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCpsAnalysisDataOperationCompleted;
        
        /// <remarks/>
        public BFServices() {
            this.Url = "http://localhost/BFWS/BFServices.asmx";
        }
        
        /// <remarks/>
        public event GetRegionsCompletedEventHandler GetRegionsCompleted;
        
        /// <remarks/>
        public event GetCropsByRegionCompletedEventHandler GetCropsByRegionCompleted;
        
        /// <remarks/>
        public event GetCropTypesByRegionCompletedEventHandler GetCropTypesByRegionCompleted;
        
        /// <remarks/>
        public event GetLandTypesByRegionCompletedEventHandler GetLandTypesByRegionCompleted;
        
        /// <remarks/>
        public event GetPlanSummaryDataCompletedEventHandler GetPlanSummaryDataCompleted;
        
        /// <remarks/>
        public event GetCpsAnalysisDataCompletedEventHandler GetCpsAnalysisDataCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://agmanager.info/GetRegions", RequestNamespace="http://agmanager.info/", ResponseNamespace="http://agmanager.info/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetRegions(string activeFlag) {
            object[] results = this.Invoke("GetRegions", new object[] {
                        activeFlag});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRegions(string activeFlag, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRegions", new object[] {
                        activeFlag}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndGetRegions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetRegionsAsync(string activeFlag) {
            this.GetRegionsAsync(activeFlag, null);
        }
        
        /// <remarks/>
        public void GetRegionsAsync(string activeFlag, object userState) {
            if ((this.GetRegionsOperationCompleted == null)) {
                this.GetRegionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRegionsOperationCompleted);
            }
            this.InvokeAsync("GetRegions", new object[] {
                        activeFlag}, this.GetRegionsOperationCompleted, userState);
        }
        
        private void OnGetRegionsOperationCompleted(object arg) {
            if ((this.GetRegionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRegionsCompleted(this, new GetRegionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://agmanager.info/GetCropsByRegion", RequestNamespace="http://agmanager.info/", ResponseNamespace="http://agmanager.info/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetCropsByRegion(string regionName, string activeFlag) {
            object[] results = this.Invoke("GetCropsByRegion", new object[] {
                        regionName,
                        activeFlag});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCropsByRegion(string regionName, string activeFlag, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCropsByRegion", new object[] {
                        regionName,
                        activeFlag}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndGetCropsByRegion(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetCropsByRegionAsync(string regionName, string activeFlag) {
            this.GetCropsByRegionAsync(regionName, activeFlag, null);
        }
        
        /// <remarks/>
        public void GetCropsByRegionAsync(string regionName, string activeFlag, object userState) {
            if ((this.GetCropsByRegionOperationCompleted == null)) {
                this.GetCropsByRegionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCropsByRegionOperationCompleted);
            }
            this.InvokeAsync("GetCropsByRegion", new object[] {
                        regionName,
                        activeFlag}, this.GetCropsByRegionOperationCompleted, userState);
        }
        
        private void OnGetCropsByRegionOperationCompleted(object arg) {
            if ((this.GetCropsByRegionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCropsByRegionCompleted(this, new GetCropsByRegionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://agmanager.info/GetCropTypesByRegion", RequestNamespace="http://agmanager.info/", ResponseNamespace="http://agmanager.info/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetCropTypesByRegion(string regionName) {
            object[] results = this.Invoke("GetCropTypesByRegion", new object[] {
                        regionName});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCropTypesByRegion(string regionName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCropTypesByRegion", new object[] {
                        regionName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndGetCropTypesByRegion(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetCropTypesByRegionAsync(string regionName) {
            this.GetCropTypesByRegionAsync(regionName, null);
        }
        
        /// <remarks/>
        public void GetCropTypesByRegionAsync(string regionName, object userState) {
            if ((this.GetCropTypesByRegionOperationCompleted == null)) {
                this.GetCropTypesByRegionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCropTypesByRegionOperationCompleted);
            }
            this.InvokeAsync("GetCropTypesByRegion", new object[] {
                        regionName}, this.GetCropTypesByRegionOperationCompleted, userState);
        }
        
        private void OnGetCropTypesByRegionOperationCompleted(object arg) {
            if ((this.GetCropTypesByRegionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCropTypesByRegionCompleted(this, new GetCropTypesByRegionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://agmanager.info/GetLandTypesByRegion", RequestNamespace="http://agmanager.info/", ResponseNamespace="http://agmanager.info/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetLandTypesByRegion(string regionName) {
            object[] results = this.Invoke("GetLandTypesByRegion", new object[] {
                        regionName});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLandTypesByRegion(string regionName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLandTypesByRegion", new object[] {
                        regionName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndGetLandTypesByRegion(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetLandTypesByRegionAsync(string regionName) {
            this.GetLandTypesByRegionAsync(regionName, null);
        }
        
        /// <remarks/>
        public void GetLandTypesByRegionAsync(string regionName, object userState) {
            if ((this.GetLandTypesByRegionOperationCompleted == null)) {
                this.GetLandTypesByRegionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLandTypesByRegionOperationCompleted);
            }
            this.InvokeAsync("GetLandTypesByRegion", new object[] {
                        regionName}, this.GetLandTypesByRegionOperationCompleted, userState);
        }
        
        private void OnGetLandTypesByRegionOperationCompleted(object arg) {
            if ((this.GetLandTypesByRegionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLandTypesByRegionCompleted(this, new GetLandTypesByRegionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://agmanager.info/GetPlanSummaryData", RequestNamespace="http://agmanager.info/", ResponseNamespace="http://agmanager.info/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetPlanSummaryData(string regionName, string cropName, string landType, string cropType, string sYieldChange, string sPriceChange, string sCostChange, string landArea) {
            object[] results = this.Invoke("GetPlanSummaryData", new object[] {
                        regionName,
                        cropName,
                        landType,
                        cropType,
                        sYieldChange,
                        sPriceChange,
                        sCostChange,
                        landArea});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPlanSummaryData(string regionName, string cropName, string landType, string cropType, string sYieldChange, string sPriceChange, string sCostChange, string landArea, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPlanSummaryData", new object[] {
                        regionName,
                        cropName,
                        landType,
                        cropType,
                        sYieldChange,
                        sPriceChange,
                        sCostChange,
                        landArea}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndGetPlanSummaryData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetPlanSummaryDataAsync(string regionName, string cropName, string landType, string cropType, string sYieldChange, string sPriceChange, string sCostChange, string landArea) {
            this.GetPlanSummaryDataAsync(regionName, cropName, landType, cropType, sYieldChange, sPriceChange, sCostChange, landArea, null);
        }
        
        /// <remarks/>
        public void GetPlanSummaryDataAsync(string regionName, string cropName, string landType, string cropType, string sYieldChange, string sPriceChange, string sCostChange, string landArea, object userState) {
            if ((this.GetPlanSummaryDataOperationCompleted == null)) {
                this.GetPlanSummaryDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPlanSummaryDataOperationCompleted);
            }
            this.InvokeAsync("GetPlanSummaryData", new object[] {
                        regionName,
                        cropName,
                        landType,
                        cropType,
                        sYieldChange,
                        sPriceChange,
                        sCostChange,
                        landArea}, this.GetPlanSummaryDataOperationCompleted, userState);
        }
        
        private void OnGetPlanSummaryDataOperationCompleted(object arg) {
            if ((this.GetPlanSummaryDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPlanSummaryDataCompleted(this, new GetPlanSummaryDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://agmanager.info/GetCpsAnalysisData", RequestNamespace="http://agmanager.info/", ResponseNamespace="http://agmanager.info/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetCpsAnalysisData(string regionName, string cropName, string landType, string cropType, string sYieldChange, string sPriceChange, string sCostChange, string planName) {
            object[] results = this.Invoke("GetCpsAnalysisData", new object[] {
                        regionName,
                        cropName,
                        landType,
                        cropType,
                        sYieldChange,
                        sPriceChange,
                        sCostChange,
                        planName});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCpsAnalysisData(string regionName, string cropName, string landType, string cropType, string sYieldChange, string sPriceChange, string sCostChange, string planName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCpsAnalysisData", new object[] {
                        regionName,
                        cropName,
                        landType,
                        cropType,
                        sYieldChange,
                        sPriceChange,
                        sCostChange,
                        planName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndGetCpsAnalysisData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetCpsAnalysisDataAsync(string regionName, string cropName, string landType, string cropType, string sYieldChange, string sPriceChange, string sCostChange, string planName) {
            this.GetCpsAnalysisDataAsync(regionName, cropName, landType, cropType, sYieldChange, sPriceChange, sCostChange, planName, null);
        }
        
        /// <remarks/>
        public void GetCpsAnalysisDataAsync(string regionName, string cropName, string landType, string cropType, string sYieldChange, string sPriceChange, string sCostChange, string planName, object userState) {
            if ((this.GetCpsAnalysisDataOperationCompleted == null)) {
                this.GetCpsAnalysisDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCpsAnalysisDataOperationCompleted);
            }
            this.InvokeAsync("GetCpsAnalysisData", new object[] {
                        regionName,
                        cropName,
                        landType,
                        cropType,
                        sYieldChange,
                        sPriceChange,
                        sCostChange,
                        planName}, this.GetCpsAnalysisDataOperationCompleted, userState);
        }
        
        private void OnGetCpsAnalysisDataOperationCompleted(object arg) {
            if ((this.GetCpsAnalysisDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCpsAnalysisDataCompleted(this, new GetCpsAnalysisDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRegionsCompletedEventHandler(object sender, GetRegionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRegionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRegionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetCropsByRegionCompletedEventHandler(object sender, GetCropsByRegionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCropsByRegionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCropsByRegionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetCropTypesByRegionCompletedEventHandler(object sender, GetCropTypesByRegionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCropTypesByRegionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCropTypesByRegionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetLandTypesByRegionCompletedEventHandler(object sender, GetLandTypesByRegionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLandTypesByRegionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLandTypesByRegionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPlanSummaryDataCompletedEventHandler(object sender, GetPlanSummaryDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPlanSummaryDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPlanSummaryDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetCpsAnalysisDataCompletedEventHandler(object sender, GetCpsAnalysisDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCpsAnalysisDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCpsAnalysisDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
}
