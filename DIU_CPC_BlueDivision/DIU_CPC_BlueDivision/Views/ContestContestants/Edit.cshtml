@model DIU_CPC_BlueDivision.Models.ContestContestant
@using DIU_CPC_BlueDivision.Models;
@{
    ViewBag.Title = "Edit";

    string appPath = "";
    appPath = string.Format("{0}", Request.Url.AbsoluteUri);
    string[] arr = appPath.Split('/');
    int id = Convert.ToInt32(arr[5]);

    ContestAndContestantsEntities db = new ContestAndContestantsEntities();
    ContestContestant contestContestant = db.ContestContestants.Find(id);
    ContestTable contestTable = db.ContestTables.FirstOrDefault(per => per.Id == contestContestant.ContestId);
    int cTrId = (int)contestTable.ContestTrackerId;

}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>ContestContestant</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.ContestId, "ContestId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ContestId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ContestId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ContestantId, "ContestantId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ContestantId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ContestantId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ContestTimeSolve, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ContestTimeSolve, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ContestTimeSolve, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UpSolve, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UpSolve, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UpSolve, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index", new { cTrackerId = cTrId })
</div>
